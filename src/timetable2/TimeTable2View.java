/*
 * TimeTable2View.java
 */
package timetable2;

import com.sun.org.apache.xml.internal.serialize.LineSeparator;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * The application's main frame.
 */
public class TimeTable2View extends FrameView {

    public TimeTable2View(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        console.setColumns(20);
        console.setLineWrap(true);
        console.setRows(5);
        console.setWrapStyleWord(true);
        console.setName("console"); // NOI18N
        jScrollPane1.setViewportView(console);

        mainPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(timetable2.TimeTable2App.class).getContext().getResourceMap(TimeTable2View.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        mainPanel.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(timetable2.TimeTable2App.class).getContext().getActionMap(TimeTable2View.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 230, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N
        jMenuBar1.add(jMenu1);

        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N
        jMenuBar1.add(jMenu2);

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

    try{
            Module.jta = console;
//            Module.jtab = jTable1;
            Module.jl = jLabel1;
            Thread t = new Thread(
                    new Runnable() {

                        public void run() {
                            TestCase.exe();
                        }
                    });
            t.start();
    }catch(Exception e)
    {
        System.out.print("error :"+e);
    }
}//GEN-LAST:event_jMenuItem1ActionPerformed


private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //File file = new File("GaSchedule.txt");
    try {
        
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse (new File("C:/file.xml"));

            // normalize text representation
            doc.getDocumentElement ().normalize ();
            //System.out.println ("Root element of the doc is " + doc.getDocumentElement().getNodeName());
                                    
            findClass();
            findProf();
            findRoom();
            findCourse();
            findevent();
            
    } catch (Exception er) {
    }
    
}//GEN-LAST:event_jMenuItem2ActionPerformed

public void findCourse() 
    {
            
       try {

           String id, name;    
           
           DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
           DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
           Document doc = docBuilder.parse (new File("C:/file.xml"));

           // normalize text representation
           doc.getDocumentElement ().normalize ();
           //System.out.println ("Root element of the doc is " + doc.getDocumentElement().getNodeName());


           NodeList listOfPersons = doc.getElementsByTagName("Course");
           int totalPersons = listOfPersons.getLength();
           //System.out.println("Total no of people : " + totalPersons);

           for(int s=0; s<listOfPersons.getLength() ; s++){


           Node firstPersonNode = listOfPersons.item(s);
           if(firstPersonNode.getNodeType() == Node.ELEMENT_NODE){


           Element firstPersonElement = (Element)firstPersonNode;
                    
                    NodeList firstNameList = firstPersonElement.getElementsByTagName("Name");
                    Element firstNameElement = (Element)firstNameList.item(0);

                    //System.out.print("====================\n");
                    
                    NodeList textFNList = firstNameElement.getChildNodes();
                    name = ((Node)textFNList.item(0)).getNodeValue().trim();                    
                    
                    id = firstPersonElement.getAttribute("Id");                                                                
                    
                        Course p = new Course();
                        p.id = id;
                        p.name = name;
                        Module.course.add(p);
                        //System.out.println(p);                        
                        console.append(p + LineSeparator.Windows);                    
            }
        }
        }catch(Exception e)
        {}
    }

 
    public void findevent()
    {
        try {

            String teachr,crs,rum,cls;
            
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse (new File("C:/file.xml"));

            // normalize text representation
            doc.getDocumentElement ().normalize ();
            //System.out.println ("Root element of the doc is " + doc.getDocumentElement().getNodeName());


            NodeList listOfPersons = doc.getElementsByTagName("Event");
            int totalPersons = listOfPersons.getLength();
            //System.out.println("Total no of people : " + totalPersons);

            for(int s=0; s<listOfPersons.getLength() ; s++){


                Node firstPersonNode = listOfPersons.item(s);
                if(firstPersonNode.getNodeType() == Node.ELEMENT_NODE){


                    Element firstPersonElement = (Element)firstPersonNode;

                    //-------
                    NodeList firstNameList = firstPersonElement.getElementsByTagName("Name");
                    Element firstNameElement = (Element)firstNameList.item(0);

                    //System.out.print("====================\n");
                    
                    NodeList textFNList = firstNameElement.getChildNodes();
                    //System.out.println("Event Name : " + ((Node)textFNList.item(0)).getNodeValue().trim());

                    //-------
                    NodeList lastNameList = firstPersonElement.getElementsByTagName("Duration");
                    Element lastNameElement = (Element)lastNameList.item(0);

                    NodeList textLNList = lastNameElement.getChildNodes();
                    //System.out.println("Duration : " + ((Node)textLNList.item(0)).getNodeValue().trim());
                    
                    //----
                    NodeList crt = firstPersonElement.getElementsByTagName("Course");
                    Element ee = (Element)crt.item(0);
                    
                    crs = ee.getAttribute("Reference");
                    //System.out.println("Course    : [" +ee.getAttribute("Reference") +"]");
                    
                    //----
                    NodeList ageList = firstPersonElement.getElementsByTagName("Resource");
                    Element ageElement = (Element)ageList.item(0);

                    //System.out.print("--------------------\n");
                    NodeList textAgeList = ageElement.getChildNodes();
                    //System.out.println("Course : " + 
                      //     ((Node)textAgeList.item(0)).getNodeValue().trim());
                                        
                    cls = ageElement.getAttribute("Reference");
                    //System.out.println("Class    : [" +ageElement.getAttribute("Reference") +"]");
                    
                    Element ageElement1 = (Element)ageList.item(1);
                    teachr = ageElement1.getAttribute("Reference");
                    //System.out.println("Teacher : [" +ageElement1.getAttribute("Reference") +"]");
                    
                    Element ageElement2 = (Element)ageList.item(2);
                    rum = ageElement2.getAttribute("Reference");
                    //System.out.println("Room    : [" +ageElement2.getAttribute("Reference") +"]");
                    
                    //System.out.print("--------------------\n");
                    
                    //------
    
                    ClassS ss = new ClassS();
                    ss.teacher = teachr;
                    ss.room = rum;
                    ss.course = crs;
                    ss.cls = cls;
                                           
                    Module.classS.add(ss);
                    System.out.println(ss);
                    console.append(ss + LineSeparator.Windows);
                    
            }
        }
        }catch(Exception e)
        {}
    }
 
    public void findRoom() {
        
          
        try{
            String name,id;
            int num = 0;
        
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse (new File("C:/file.xml"));

            // normalize text representation
            doc.getDocumentElement ().normalize ();
            //System.out.println ("Root element of the doc is " + doc.getDocumentElement().getNodeName());
            NodeList listOfPersons = doc.getElementsByTagName("Resource");
            int totalPersons = listOfPersons.getLength();
            //System.out.println("Total no of people : " + totalPersons);

                for(int s=0; s<listOfPersons.getLength() ; s++){


                Node firstPersonNode = listOfPersons.item(s);
                if(firstPersonNode.getNodeType() == Node.ELEMENT_NODE){


                    Element firstPersonElement = (Element)firstPersonNode;

                    //-------
                    NodeList firstNameList = firstPersonElement.getElementsByTagName("Name");
                    Element firstNameElement = (Element)firstNameList.item(0);
                    
                    //System.out.print("====================\n");
                    
                    NodeList textFNList = firstNameElement.getChildNodes();
                    name = ((Node)textFNList.item(0)).getNodeValue().trim();
                    //System.out.println("Name : " +name );
                    

                    NodeList ageList = firstPersonElement.getElementsByTagName("ResourceType");
                    Element ageElement = (Element)ageList.item(0);
                    
                    //System.out.println("Type : [" +ageElement.getAttribute("Reference") +"]");        
                    if(ageElement.getAttribute("Reference").equalsIgnoreCase("Room"))
                    {
                        num++;
                        id = num+"";
                    
                        room r = new room();
                        r.id = id;
                        r.name = name;
                        Module.room.add(r);
                        //System.out.println(r);
                        console.append(r + LineSeparator.Windows);
                    }
            }
        }
        }catch(Exception e)
        {}
    }

    public void findClass() {
        try{
            String name,id;
            int num = 0;
        
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse (new File("C:/file.xml"));

            // normalize text representation
            doc.getDocumentElement ().normalize ();
            //System.out.println ("Root element of the doc is " + doc.getDocumentElement().getNodeName());
            NodeList listOfPersons = doc.getElementsByTagName("Resource");
            int totalPersons = listOfPersons.getLength();
            //System.out.println("Total no of people : " + totalPersons);

                for(int s=0; s<listOfPersons.getLength() ; s++){


                Node firstPersonNode = listOfPersons.item(s);
                if(firstPersonNode.getNodeType() == Node.ELEMENT_NODE){


                    Element firstPersonElement = (Element)firstPersonNode;

                    //-------
                    NodeList firstNameList = firstPersonElement.getElementsByTagName("Name");
                    Element firstNameElement = (Element)firstNameList.item(0);
                    
                    //System.out.print("====================\n");
                    
                    NodeList textFNList = firstNameElement.getChildNodes();
                    name = ((Node)textFNList.item(0)).getNodeValue().trim();
                    //System.out.println("Name : " +name );
                    

                    NodeList ageList = firstPersonElement.getElementsByTagName("ResourceType");
                    Element ageElement = (Element)ageList.item(0);
                    
                    
                    //System.out.println("Type : [" +ageElement.getAttribute("Reference") +"]");        
                    if(ageElement.getAttribute("Reference").equalsIgnoreCase("Class"))
                    {
                        num++;
                        id = num+"";
                    
                        CLS s1 = new CLS();
                        s1.id = id;
                        s1.name = name;
                        Module.cls.add(s1);
                        //System.out.println(s1);
                        console.append(s1 + LineSeparator.Windows);
                    }
            }
        }
        }catch(Exception e)
        {}
    }

    public void findProf() {
        
        try{
            String name,id;
            int num = 0;
        
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse (new File("C:/file.xml"));

            // normalize text representation
            doc.getDocumentElement ().normalize ();
            //System.out.println ("Root element of the doc is " + doc.getDocumentElement().getNodeName());
            NodeList listOfPersons = doc.getElementsByTagName("Resource");
            int totalPersons = listOfPersons.getLength();
            //System.out.println("Total no of people : " + totalPersons);

                for(int s=0; s<listOfPersons.getLength() ; s++){


                Node firstPersonNode = listOfPersons.item(s);
                if(firstPersonNode.getNodeType() == Node.ELEMENT_NODE){


                    Element firstPersonElement = (Element)firstPersonNode;

                    //-------
                    NodeList firstNameList = firstPersonElement.getElementsByTagName("Name");
                    Element firstNameElement = (Element)firstNameList.item(0);
                    
                    //System.out.print("====================\n");
                    
                    NodeList textFNList = firstNameElement.getChildNodes();
                    name = ((Node)textFNList.item(0)).getNodeValue().trim();
                    //System.out.println("Name : " +name );
                    

                    NodeList ageList = firstPersonElement.getElementsByTagName("ResourceType");
                    Element ageElement = (Element)ageList.item(0);
                    
                    //System.out.println("Type : [" +ageElement.getAttribute("Reference") +"]");        
                    if(ageElement.getAttribute("Reference").equalsIgnoreCase("Teacher"))
                    {
                        num++;
                        id = num+"";
                    
                        Prof p = new Prof();
                        p.id = id;
                        p.name = name;
                        Module.professor.add(p);
                        //System.out.println(p);
                        console.append(p + LineSeparator.Windows);
                    }
            }
        }
        }catch(Exception e)
        {}
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea console;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
}
